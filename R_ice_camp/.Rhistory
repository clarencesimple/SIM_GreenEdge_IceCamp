water_II_nodes <- long_DNA_water_II %>%
group_by(functional_trait) %>%
summarize(n_reads=sum(n_reads)) %>%
left_join(interactions_water_II_binned_self, by="functional_trait") %>%
left_join(circle_position, by="functional_trait") %>%
rename(self=total,self_posbin=pos_bin)
water_II_network <- water_II_edges %>%
left_join(water_II_nodes%>%rename(functional.x=functional_trait), by="functional.x") %>%
rename(self.x=self,self_posbin.x=self_posbin, n_reads.x=n_reads,circle_position.x=circle_position) %>%
left_join(water_II_nodes%>%rename(functional.y=functional_trait), by="functional.y") %>%
rename(self.y=self,self_posbin.y=self_posbin, n_reads.y=n_reads, circle_position.y=circle_position)
water_II_network[is.na(water_II_network)] <- 0
water_II_network <- water_II_network %>%
mutate_at(c("pos_bin","self_posbin.x","self_posbin.y"), as.numeric) %>%
mutate(n_reads.x=round(n_reads.x*(44/23)), n_reads.y=round(n_reads.y*(44/23)))
#to make all network node sizes are normalised
write.csv(water_II_network, "./water_II_network.csv")
interactions_III <- water_III_net$edgelist1 %>%
rename(asv_code=v1) %>%
left_join(taxa%>%select(asv_code,functional_trait,species,origin),by="asv_code") %>%
rename(functional.x=functional_trait, x=asv_code, asv_code=v2, species.x=species, origin.x=origin) %>%
left_join(taxa%>%select(asv_code,functional_trait,species,origin),by="asv_code") %>%
rename(functional.y=functional_trait, y=asv_code, species.y=species, origin.y=origin)%>%
arrange(desc(asso)) %>%
mutate(pos_neg=ifelse(asso>0,"pos","neg"))
interactions_III_pos <-filter(interactions_III, interactions_III$pos_neg=="pos")
interactions_III_neg <-filter(interactions_III, interactions_III$pos_neg=="neg")
# Create a combined factor representing the pairs, sorted
sorted_pairings <- factor(apply(interactions_III_pos[, c("functional.x", "functional.y")], 1, function(row) paste(sort(row), collapse = "-")))
sorted_pairing_pos <- as.data.frame(table(sorted_pairings))
sorted_pairing_pos$pos_neg <- "pos"
sorted_pairings <- factor(apply(interactions_III_neg[, c("functional.x", "functional.y")], 1, function(row) paste(sort(row), collapse = "-")))
sorted_pairing_neg <- as.data.frame(table(sorted_pairings))
sorted_pairing_neg$pos_neg <- "neg"
interactions_III_combined <- rbind(sorted_pairing_pos,sorted_pairing_neg)
interactions_count <-interactions_III_combined %>%
group_by(sorted_pairings) %>%
summarize(total=sum(Freq))
interactions_III_combined <- interactions_III_combined %>%
left_join(interactions_count,by="sorted_pairings") %>%
mutate(pos_pct=(Freq/total)*100) #%>%
#filter(total>=10)
sorted_pairing_levels <- interactions_III_combined %>%
filter(pos_neg=="pos") %>%
arrange(pos_pct) %>%
select(sorted_pairings)
interactions_III_combined$sorted_pairings <- factor(interactions_III_combined$sorted_pairings,levels=sorted_pairing_levels$sorted_pairings)
p_interactions_water_III <- ggplot(interactions_III_combined%>%filter(total>=10), aes(x=Freq, y=sorted_pairings, fill=pos_neg)) +
geom_bar(position="fill", stat="identity", color="black",size=0.3) +
geom_text(aes(x=Freq, y=sorted_pairings, label=Freq, vjust=0.5),
position=position_fill(vjust=0.5),
size=4,
show.legend = FALSE,
family="Helvetica",
color="white") +
theme_bw() +
theme(text=element_text(size=22),
axis.text.x = element_text(angle = 90, hjust=1),
axis.title=element_blank(),
legend.title=element_blank(),
legend.position = "bottom",
plot.margin = unit(c(0,0,3,0), "cm"),
panel.grid=element_blank(),
strip.background=element_blank(),
legend.key.size=unit(2,"line")) +
scale_fill_manual(values=c("#2f67b1","#bf2c23"),breaks=c("pos","neg"))
interactions_water_III_binned <- interactions_III_combined %>%
mutate(pos_bin = cut(pos_pct, breaks=c(0,10,20,30,40,50,60,70,80,90,100), right=FALSE,include.lowest=TRUE)) %>%
mutate(self = ifelse(sorted_pairings%in%self_interaction,"Yes","No")) %>%
mutate(pos_bin = sub(",.*","",pos_bin))
interactions_water_III_binned$pos_bin <- str_sub(interactions_water_III_binned$pos_bin,2)
interactions_water_III_binned_self <- interactions_water_III_binned %>%
filter(self=="Yes" & pos_neg=="pos") %>%
rename(functional_trait = sorted_pairings) %>%
select(functional_trait,total,pos_bin) %>%
mutate(functional_trait = sub("-.*", "", functional_trait))
water_III_edges <- interactions_water_III_binned %>%
filter(self=="No" & pos_neg=="pos") %>%
separate(sorted_pairings,into=c("functional.x", "functional.y"),sep="-") %>%
select(functional.x, functional.y, total, pos_bin)
interaction_count <- vector()
for (i in 1:length(functionalTraits)){
count <- water_III_edges %>%
filter(functional.x == functionalTraits[i] | functional.y == functionalTraits[i])
count <- sum(count$total)
interaction_count[i] <- count
}
circle_position <- data.frame("circle_position"=c(1:9),
"functional_trait" = functionalTraits,
"interaction_count" = interaction_count)
water_III_nodes <- long_DNA_water_III %>%
group_by(functional_trait) %>%
summarize(n_reads=sum(n_reads)) %>%
left_join(interactions_water_III_binned_self, by="functional_trait") %>%
left_join(circle_position, by="functional_trait") %>%
rename(self=total,self_posbin=pos_bin)
water_III_network <- water_III_edges %>%
left_join(water_III_nodes%>%rename(functional.x=functional_trait), by="functional.x") %>%
rename(self.x=self,self_posbin.x=self_posbin, n_reads.x=n_reads,circle_position.x=circle_position) %>%
left_join(water_III_nodes%>%rename(functional.y=functional_trait), by="functional.y") %>%
rename(self.y=self,self_posbin.y=self_posbin, n_reads.y=n_reads, circle_position.y=circle_position)
water_III_network[is.na(water_III_network)] <- 0
water_III_network <- water_III_network %>%
mutate_at(c("pos_bin","self_posbin.x","self_posbin.y"), as.numeric) %>%
mutate(n_reads.x=round(n_reads.x*(44/44)), n_reads.y=round(n_reads.y*(44/44)))
#to make all network node sizes are normalised
write.csv(water_III_network, "./water_III_network.csv")
pdf("./GE_IC_functional_figs/supplementary_posneg_interactions.pdf", height=24, width=24) ;  plot((p_interactions_ice_I + p_interactions_ice_II + p_interactions_ice_III)  / (p_interactions_water_I + p_interactions_water_II + p_interactions_water_III)); dev.off()
interactions_III <- ice_III_net$edgelist1 %>%
rename(asv_code=v1) %>%
left_join(taxa%>%select(asv_code,functional_trait,species,origin),by="asv_code") %>%
rename(functional.x=functional_trait, x=asv_code, asv_code=v2, species.x=species, origin.x=origin) %>%
left_join(taxa%>%select(asv_code,functional_trait,species,origin),by="asv_code") %>%
rename(functional.y=functional_trait, y=asv_code, species.y=species, origin.y=origin)%>%
arrange(desc(asso)) %>%
mutate(pos_neg=ifelse(asso>0,"pos","neg"))
interactions_III_pos <-filter(interactions_III, interactions_III$pos_neg=="pos")
interactions_III_neg <-filter(interactions_III, interactions_III$pos_neg=="neg")
# Create a combined factor representing the pairs, sorted
sorted_pairings <- factor(apply(interactions_III_pos[, c("functional.x", "functional.y")], 1, function(row) paste(sort(row), collapse = "-")))
sorted_pairing_pos <- as.data.frame(table(sorted_pairings))
sorted_pairing_pos$pos_neg <- "pos"
sorted_pairings <- factor(apply(interactions_III_neg[, c("functional.x", "functional.y")], 1, function(row) paste(sort(row), collapse = "-")))
sorted_pairing_neg <- as.data.frame(table(sorted_pairings))
sorted_pairing_neg$pos_neg <- "neg"
interactions_III_combined <- rbind(sorted_pairing_pos,sorted_pairing_neg)
interactions_count <-interactions_III_combined %>%
group_by(sorted_pairings) %>%
summarize(total=sum(Freq))
interactions_III_combined <- interactions_III_combined %>%
left_join(interactions_count,by="sorted_pairings") %>%
mutate(pos_pct=(Freq/total)*100) #%>%
#filter(total>=10)
sorted_pairing_levels <- interactions_III_combined %>%
filter(pos_neg=="pos") %>%
arrange(pos_pct) %>%
select(sorted_pairings)
interactions_III_combined$sorted_pairings <- factor(interactions_III_combined$sorted_pairings,levels=sorted_pairing_levels$sorted_pairings)
p_interactions_ice_III <- ggplot(interactions_III_combined%>%filter(total>=10), aes(x=Freq, y=sorted_pairings, fill=pos_neg)) +
geom_bar(position="fill", stat="identity", color="black",size=0.3) +
geom_text(aes(x=Freq, y=sorted_pairings, label=Freq, vjust=0.5),
position=position_fill(vjust=0.5),
size=4,
show.legend = FALSE,
family="Helvetica",
color="white") +
theme_bw() +
theme(text=element_text(size=22),
axis.text.x = element_text(angle = 90, hjust=1),
axis.title=element_blank(),
legend.title=element_blank(),
legend.position = "bottom",
plot.margin = unit(c(0,0,3,0), "cm"),
panel.grid=element_blank(),
strip.background=element_blank(),
legend.key.size=unit(2,"line")) +
scale_fill_manual(values=c("#2f67b1","#bf2c23"),breaks=c("pos","neg"))
interactions_ice_III_binned <- interactions_III_combined %>%
mutate(pos_bin = cut(pos_pct, breaks=c(0,10,20,30,40,50,60,70,80,90,100), right=FALSE,include.lowest=TRUE)) %>%
mutate(self = ifelse(sorted_pairings%in%self_interaction,"Yes","No")) %>%
mutate(pos_bin = sub(",.*","",pos_bin))
interactions_ice_III_binned$pos_bin <- str_sub(interactions_ice_III_binned$pos_bin,2)
interactions_ice_III_binned_self <- interactions_ice_III_binned %>%
filter(self=="Yes" & pos_neg=="pos") %>%
rename(functional_trait = sorted_pairings) %>%
select(functional_trait,total,pos_bin) %>%
mutate(functional_trait = sub("-.*", "", functional_trait))
ice_III_edges <- interactions_ice_III_binned %>%
filter(self=="No" & pos_neg=="pos") %>%
separate(sorted_pairings,into=c("functional.x", "functional.y"),sep="-") %>%
select(functional.x, functional.y, total, pos_bin)
interaction_count <- vector()
for (i in 1:length(functionalTraits)){
count <- ice_III_edges %>%
filter(functional.x == functionalTraits[i] | functional.y == functionalTraits[i])
count <- sum(count$total)
interaction_count[i] <- count
}
circle_position <- data.frame("circle_position"=c(1:9),
"functional_trait" = functionalTraits,
"interaction_count" = interaction_count)
ice_III_nodes <- long_DNA_ice_III %>%
group_by(functional_trait) %>%
summarize(n_reads=sum(n_reads)) %>%
left_join(interactions_ice_III_binned_self, by="functional_trait") %>%
left_join(circle_position, by="functional_trait") %>%
rename(self=total,self_posbin=pos_bin)
ice_III_network <- ice_III_edges %>%
left_join(ice_III_nodes%>%rename(functional.x=functional_trait), by="functional.x") %>%
rename(self.x=self,self_posbin.x=self_posbin, n_reads.x=n_reads,circle_position.x=circle_position) %>%
left_join(ice_III_nodes%>%rename(functional.y=functional_trait), by="functional.y") %>%
rename(self.y=self,self_posbin.y=self_posbin, n_reads.y=n_reads, circle_position.y=circle_position)
ice_III_network[is.na(ice_III_network)] <- 0
ice_III_network <- ice_III_network %>%
mutate_at(c("pos_bin","self_posbin.x","self_posbin.y"), as.numeric) %>%
mutate(n_reads.x=round(n_reads.x*(44/11)), n_reads.y=round(n_reads.y*(44/11)))
#to make all network node sizes are normalised
write.csv(ice_III_network, "./ice_III_network.csv")
interactions_II <- ice_II_net$edgelist1 %>%
rename(asv_code=v1) %>%
left_join(taxa%>%select(asv_code,functional_trait,species,origin),by="asv_code") %>%
rename(functional.x=functional_trait, x=asv_code, asv_code=v2, species.x=species, origin.x=origin) %>%
left_join(taxa%>%select(asv_code,functional_trait,species,origin),by="asv_code") %>%
rename(functional.y=functional_trait, y=asv_code, species.y=species, origin.y=origin)%>%
arrange(desc(asso)) %>%
mutate(pos_neg=ifelse(asso>0,"pos","neg"))
interactions_II_pos <-filter(interactions_II, interactions_II$pos_neg=="pos")
interactions_II_neg <-filter(interactions_II, interactions_II$pos_neg=="neg")
# Create a combined factor representing the pairs, sorted
sorted_pairings <- factor(apply(interactions_II_pos[, c("functional.x", "functional.y")], 1, function(row) paste(sort(row), collapse = "-")))
sorted_pairing_pos <- as.data.frame(table(sorted_pairings))
sorted_pairing_pos$pos_neg <- "pos"
sorted_pairings <- factor(apply(interactions_II_neg[, c("functional.x", "functional.y")], 1, function(row) paste(sort(row), collapse = "-")))
sorted_pairing_neg <- as.data.frame(table(sorted_pairings))
sorted_pairing_neg$pos_neg <- "neg"
interactions_II_combined <- rbind(sorted_pairing_pos,sorted_pairing_neg)
interactions_count <-interactions_II_combined %>%
group_by(sorted_pairings) %>%
summarize(total=sum(Freq))
interactions_II_combined <- interactions_II_combined %>%
left_join(interactions_count,by="sorted_pairings") %>%
mutate(pos_pct=(Freq/total)*100) #%>%
#filter(total>=10)
sorted_pairing_levels <- interactions_II_combined %>%
filter(pos_neg=="pos") %>%
arrange(pos_pct) %>%
select(sorted_pairings)
interactions_II_combined$sorted_pairings <- factor(interactions_II_combined$sorted_pairings,levels=sorted_pairing_levels$sorted_pairings)
p_interactions_ice_II <- ggplot(interactions_II_combined%>%filter(total>=10), aes(x=Freq, y=sorted_pairings, fill=pos_neg)) +
geom_bar(position="fill", stat="identity", color="black",size=0.3) +
geom_text(aes(x=Freq, y=sorted_pairings, label=Freq, vjust=0.5),
position=position_fill(vjust=0.5),
size=4,
show.legend = FALSE,
family="Helvetica",
color="white") +
theme_bw() +
theme(text=element_text(size=22),
axis.text.x = element_text(angle = 90, hjust=1),
axis.title=element_blank(),
legend.title=element_blank(),
legend.position = "bottom",
plot.margin = unit(c(0,0,3,0), "cm"),
panel.grid=element_blank(),
strip.background=element_blank(),
legend.key.size=unit(2,"line")) +
scale_fill_manual(values=c("#2f67b1","#bf2c23"),breaks=c("pos","neg"))
interactions_ice_II_binned <- interactions_II_combined %>%
mutate(pos_bin = cut(pos_pct, breaks=c(0,10,20,30,40,50,60,70,80,90,100), right=FALSE,include.lowest=TRUE)) %>%
mutate(self = ifelse(sorted_pairings%in%self_interaction,"Yes","No")) %>%
mutate(pos_bin = sub(",.*","",pos_bin))
interactions_ice_II_binned$pos_bin <- str_sub(interactions_ice_II_binned$pos_bin,2)
interactions_ice_II_binned_self <- interactions_ice_II_binned %>%
filter(self=="Yes" & pos_neg=="pos") %>%
rename(functional_trait = sorted_pairings) %>%
select(functional_trait,total,pos_bin) %>%
mutate(functional_trait = sub("-.*", "", functional_trait))
ice_II_edges <- interactions_ice_II_binned %>%
filter(self=="No" & pos_neg=="pos") %>%
separate(sorted_pairings,into=c("functional.x", "functional.y"),sep="-") %>%
select(functional.x, functional.y, total, pos_bin)
interaction_count <- vector()
for (i in 1:length(functionalTraits)){
count <- ice_II_edges %>%
filter(functional.x == functionalTraits[i] | functional.y == functionalTraits[i])
count <- sum(count$total)
interaction_count[i] <- count
}
circle_position <- data.frame("circle_position"=c(1:9),
"functional_trait" = functionalTraits,
"interaction_count" = interaction_count)
ice_II_nodes <- long_DNA_ice_II %>%
group_by(functional_trait) %>%
summarize(n_reads=sum(n_reads)) %>%
left_join(interactions_ice_II_binned_self, by="functional_trait") %>%
left_join(circle_position, by="functional_trait") %>%
rename(self=total,self_posbin=pos_bin)
ice_II_network <- ice_II_edges %>%
left_join(ice_II_nodes%>%rename(functional.x=functional_trait), by="functional.x") %>%
rename(self.x=self,self_posbin.x=self_posbin, n_reads.x=n_reads,circle_position.x=circle_position) %>%
left_join(ice_II_nodes%>%rename(functional.y=functional_trait), by="functional.y") %>%
rename(self.y=self,self_posbin.y=self_posbin, n_reads.y=n_reads, circle_position.y=circle_position)
ice_II_network[is.na(ice_II_network)] <- 0
ice_II_network <- ice_II_network %>%
mutate_at(c("pos_bin","self_posbin.x","self_posbin.y"), as.numeric) %>%
mutate(n_reads.x=round(n_reads.x*(44/11)), n_reads.y=round(n_reads.y*(44/11)))
#to make all network node sizes are normalised
write.csv(ice_II_network, "./ice_II_network.csv")
View(ice_II_nodes)
View(ice_III_nodes)
View(circle_position)
interactions_III <- ice_III_net$edgelist1 %>%
rename(asv_code=v1) %>%
left_join(taxa%>%select(asv_code,functional_trait,species,origin),by="asv_code") %>%
rename(functional.x=functional_trait, x=asv_code, asv_code=v2, species.x=species, origin.x=origin) %>%
left_join(taxa%>%select(asv_code,functional_trait,species,origin),by="asv_code") %>%
rename(functional.y=functional_trait, y=asv_code, species.y=species, origin.y=origin)%>%
arrange(desc(asso)) %>%
mutate(pos_neg=ifelse(asso>0,"pos","neg"))
interactions_III_pos <-filter(interactions_III, interactions_III$pos_neg=="pos")
interactions_III_neg <-filter(interactions_III, interactions_III$pos_neg=="neg")
# Create a combined factor representing the pairs, sorted
sorted_pairings <- factor(apply(interactions_III_pos[, c("functional.x", "functional.y")], 1, function(row) paste(sort(row), collapse = "-")))
sorted_pairing_pos <- as.data.frame(table(sorted_pairings))
sorted_pairing_pos$pos_neg <- "pos"
sorted_pairings <- factor(apply(interactions_III_neg[, c("functional.x", "functional.y")], 1, function(row) paste(sort(row), collapse = "-")))
sorted_pairing_neg <- as.data.frame(table(sorted_pairings))
sorted_pairing_neg$pos_neg <- "neg"
interactions_III_combined <- rbind(sorted_pairing_pos,sorted_pairing_neg)
interactions_count <-interactions_III_combined %>%
group_by(sorted_pairings) %>%
summarize(total=sum(Freq))
interactions_III_combined <- interactions_III_combined %>%
left_join(interactions_count,by="sorted_pairings") %>%
mutate(pos_pct=(Freq/total)*100) #%>%
#filter(total>=10)
sorted_pairing_levels <- interactions_III_combined %>%
filter(pos_neg=="pos") %>%
arrange(pos_pct) %>%
select(sorted_pairings)
interactions_III_combined$sorted_pairings <- factor(interactions_III_combined$sorted_pairings,levels=sorted_pairing_levels$sorted_pairings)
p_interactions_ice_III <- ggplot(interactions_III_combined%>%filter(total>=10), aes(x=Freq, y=sorted_pairings, fill=pos_neg)) +
geom_bar(position="fill", stat="identity", color="black",size=0.3) +
geom_text(aes(x=Freq, y=sorted_pairings, label=Freq, vjust=0.5),
position=position_fill(vjust=0.5),
size=4,
show.legend = FALSE,
family="Helvetica",
color="white") +
theme_bw() +
theme(text=element_text(size=22),
axis.text.x = element_text(angle = 90, hjust=1),
axis.title=element_blank(),
legend.title=element_blank(),
legend.position = "bottom",
plot.margin = unit(c(0,0,3,0), "cm"),
panel.grid=element_blank(),
strip.background=element_blank(),
legend.key.size=unit(2,"line")) +
scale_fill_manual(values=c("#2f67b1","#bf2c23"),breaks=c("pos","neg"))
interactions_ice_III_binned <- interactions_III_combined %>%
mutate(pos_bin = cut(pos_pct, breaks=c(0,10,20,30,40,50,60,70,80,90,100), right=FALSE,include.lowest=TRUE)) %>%
mutate(self = ifelse(sorted_pairings%in%self_interaction,"Yes","No")) %>%
mutate(pos_bin = sub(",.*","",pos_bin))
interactions_ice_III_binned$pos_bin <- str_sub(interactions_ice_III_binned$pos_bin,2)
interactions_ice_III_binned_self <- interactions_ice_III_binned %>%
filter(self=="Yes" & pos_neg=="pos") %>%
rename(functional_trait = sorted_pairings) %>%
select(functional_trait,total,pos_bin) %>%
mutate(functional_trait = sub("-.*", "", functional_trait))
ice_III_edges <- interactions_ice_III_binned %>%
filter(self=="No" & pos_neg=="pos") %>%
separate(sorted_pairings,into=c("functional.x", "functional.y"),sep="-") %>%
select(functional.x, functional.y, total, pos_bin)
interaction_count <- vector()
for (i in 1:length(functionalTraits)){
count <- ice_III_edges %>%
filter(functional.x == functionalTraits[i] | functional.y == functionalTraits[i])
count <- sum(count$total)
interaction_count[i] <- count
}
circle_position <- data.frame("circle_position"=c(1:9),
"functional_trait" = functionalTraits,
"interaction_count" = interaction_count)
ice_III_nodes <- long_DNA_ice_III %>%
group_by(functional_trait) %>%
summarize(n_reads=sum(n_reads)) %>%
left_join(interactions_ice_III_binned_self, by="functional_trait") %>%
left_join(circle_position, by="functional_trait") %>%
rename(self=total,self_posbin=pos_bin)
ice_III_network <- ice_III_edges %>%
left_join(ice_III_nodes%>%rename(functional.x=functional_trait), by="functional.x") %>%
rename(self.x=self,self_posbin.x=self_posbin, n_reads.x=n_reads,circle_position.x=circle_position) %>%
left_join(ice_III_nodes%>%rename(functional.y=functional_trait), by="functional.y") %>%
rename(self.y=self,self_posbin.y=self_posbin, n_reads.y=n_reads, circle_position.y=circle_position)
ice_III_network[is.na(ice_III_network)] <- 0
ice_III_network <- ice_III_network %>%
mutate_at(c("pos_bin","self_posbin.x","self_posbin.y"), as.numeric) %>%
mutate(n_reads.x=round(n_reads.x*(44/11)), n_reads.y=round(n_reads.y*(44/11)))
#to make all network node sizes are normalised
write.csv(ice_III_network, "./ice_III_network.csv")
View(circle_position)
View(ice_III_nodes)
View(long_DNA_ice_III)
ice_III_nodes <- long_DNA_ice_III %>%
group_by(functional_trait) %>%
summarize(n_reads=sum(n_reads))
View(ice_III_nodes)
View(ice_II_nodes)
%>%  left_join(interactions_ice_III_binned_self, by="functional_trait") %>%
ice_III_nodes <- long_DNA_ice_III %>%
group_by(functional_trait) %>%
summarize(n_reads=sum(n_reads)) %>%
add_row(functional_trait="Invertebrate_parasite",n_reads=1) %>%
left_join(interactions_ice_III_binned_self, by="functional_trait") %>%
left_join(circle_position, by="functional_trait") %>%
rename(self=total,self_posbin=pos_bin)
ice_III_network <- ice_III_edges %>%
left_join(ice_III_nodes%>%rename(functional.x=functional_trait), by="functional.x") %>%
rename(self.x=self,self_posbin.x=self_posbin, n_reads.x=n_reads,circle_position.x=circle_position) %>%
left_join(ice_III_nodes%>%rename(functional.y=functional_trait), by="functional.y") %>%
rename(self.y=self,self_posbin.y=self_posbin, n_reads.y=n_reads, circle_position.y=circle_position)
ice_III_edges <- interactions_ice_III_binned %>%
filter(self=="No" & pos_neg=="pos") %>%
separate(sorted_pairings,into=c("functional.x", "functional.y"),sep="-") %>%
select(functional.x, functional.y, total, pos_bin)
interaction_count <- vector()
for (i in 1:length(functionalTraits)){
count <- ice_III_edges %>%
filter(functional.x == functionalTraits[i] | functional.y == functionalTraits[i])
count <- sum(count$total)
interaction_count[i] <- count
}
circle_position <- data.frame("circle_position"=c(1:9),
"functional_trait" = functionalTraits,
"interaction_count" = interaction_count)
ice_III_nodes <- long_DNA_ice_III %>%
group_by(functional_trait) %>%
summarize(n_reads=sum(n_reads)) %>%
add_row(functional_trait="Invertebrate_parasite",n_reads=1) %>%
left_join(interactions_ice_III_binned_self, by="functional_trait") %>%
left_join(circle_position, by="functional_trait") %>%
rename(self=total,self_posbin=pos_bin)
ice_III_network <- ice_III_edges %>%
left_join(ice_III_nodes%>%rename(functional.x=functional_trait), by="functional.x") %>%
rename(self.x=self,self_posbin.x=self_posbin, n_reads.x=n_reads,circle_position.x=circle_position) %>%
left_join(ice_III_nodes%>%rename(functional.y=functional_trait), by="functional.y") %>%
rename(self.y=self,self_posbin.y=self_posbin, n_reads.y=n_reads, circle_position.y=circle_position)
ice_III_network[is.na(ice_III_network)] <- 0
ice_III_network <- ice_III_network %>%
mutate_at(c("pos_bin","self_posbin.x","self_posbin.y"), as.numeric) %>%
mutate(n_reads.x=round(n_reads.x*(44/11)), n_reads.y=round(n_reads.y*(44/11)))
View(ice_III_network)
ice_III_nodes <- long_DNA_ice_III %>%
group_by(functional_trait) %>%
summarize(n_reads=sum(n_reads)) %>%
add_row("Invertebrate_parasite",1) %>%
left_join(interactions_ice_III_binned_self, by="functional_trait") %>%
left_join(circle_position, by="functional_trait") %>%
rename(self=total,self_posbin=pos_bin)
artificial_row <- c("Invertebrate_parasite","Invertebrate_parasite",0,0,1,0,0,4,0,1,0,0,4,0)
ice_III_network <- ice_III_edges %>%
left_join(ice_III_nodes%>%rename(functional.x=functional_trait), by="functional.x") %>%
rename(self.x=self,self_posbin.x=self_posbin, n_reads.x=n_reads,circle_position.x=circle_position) %>%
left_join(ice_III_nodes%>%rename(functional.y=functional_trait), by="functional.y") %>%
rename(self.y=self,self_posbin.y=self_posbin, n_reads.y=n_reads, circle_position.y=circle_position) %>%
rbind(artificial_row)
ice_III_network[is.na(ice_III_network)] <- 0
ice_III_network <- ice_III_network %>%
mutate_at(c("pos_bin","self_posbin.x","self_posbin.y"), as.numeric) %>%
mutate(n_reads.x=round(n_reads.x*(44/11)), n_reads.y=round(n_reads.y*(44/11)))
View(ice_III_network)
ice_III_network <- ice_III_network %>%
mutate_at(total:interaction_count.y, as.numeric) %>%
mutate(n_reads.x=round(n_reads.x*(44/11)), n_reads.y=round(n_reads.y*(44/11)))
ice_III_network <- ice_III_network %>%
mutate_at('total':'interaction_count.y', as.numeric) %>%
mutate(n_reads.x=round(n_reads.x*(44/11)), n_reads.y=round(n_reads.y*(44/11)))
ice_III_network <- ice_III_network %>%
mutate_at(c(total:interaction_count.y), as.numeric) %>%
mutate(n_reads.x=round(n_reads.x*(44/11)), n_reads.y=round(n_reads.y*(44/11)))
ice_III_network <- ice_III_network %>%
mutate_if(is.character, as.numeric) %>%
mutate(n_reads.x=round(n_reads.x*(44/11)), n_reads.y=round(n_reads.y*(44/11)))
ice_III_network <- ice_III_network %>%
mutate_at(vars(total:interaction_count.y), as.numeric) %>%
mutate(n_reads.x=round(n_reads.x*(44/11)), n_reads.y=round(n_reads.y*(44/11)))
ice_III_network <- ice_III_edges %>%
left_join(ice_III_nodes%>%rename(functional.x=functional_trait), by="functional.x") %>%
rename(self.x=self,self_posbin.x=self_posbin, n_reads.x=n_reads,circle_position.x=circle_position) %>%
left_join(ice_III_nodes%>%rename(functional.y=functional_trait), by="functional.y") %>%
rename(self.y=self,self_posbin.y=self_posbin, n_reads.y=n_reads, circle_position.y=circle_position) %>%
rbind(artificial_row)
ice_III_network[is.na(ice_III_network)] <- 0
ice_III_network <- ice_III_network %>%
mutate_at(vars(total:interaction_count.y), as.numeric) %>%
mutate(n_reads.x=round(n_reads.x*(44/11)), n_reads.y=round(n_reads.y*(44/11)))
write.csv(ice_III_network, "./ice_III_network.csv")
artificial_row <- c("Invertebrate_parasite","Protist_parasite",0,0,1,0,0,4,0,1,0,0,4,0)
ice_III_network <- ice_III_edges %>%
left_join(ice_III_nodes%>%rename(functional.x=functional_trait), by="functional.x") %>%
rename(self.x=self,self_posbin.x=self_posbin, n_reads.x=n_reads,circle_position.x=circle_position) %>%
left_join(ice_III_nodes%>%rename(functional.y=functional_trait), by="functional.y") %>%
rename(self.y=self,self_posbin.y=self_posbin, n_reads.y=n_reads, circle_position.y=circle_position) %>%
rbind(artificial_row)
ice_III_network[is.na(ice_III_network)] <- 0
ice_III_network <- ice_III_network %>%
mutate_at(vars(total:interaction_count.y), as.numeric) %>%
mutate(n_reads.x=round(n_reads.x*(44/11)), n_reads.y=round(n_reads.y*(44/11)))
write.csv(ice_III_network, "./ice_III_network.csv")
View(ice_III_nodes)
View(ice_III_nodes)
artificial_row <- c("Invertebrate_parasite","Protist_parasite",0,0,1,0,0,4,0,1313,1,90,3,19)
ice_III_nodes <- long_DNA_ice_III %>%
group_by(functional_trait) %>%
summarize(n_reads=sum(n_reads)) %>%
add_row(functional_trait="Invertebrate_parasite",n_reads=1) %>% #artificially add a Invertebrate_parasite node
left_join(interactions_ice_III_binned_self, by="functional_trait") %>%
left_join(circle_position, by="functional_trait") %>%
rename(self=total,self_posbin=pos_bin)
artificial_row <- c("Invertebrate_parasite","Protist_parasite",0,0,1,0,0,4,0,1313,1,90,3,19)
ice_III_network <- ice_III_edges %>%
left_join(ice_III_nodes%>%rename(functional.x=functional_trait), by="functional.x") %>%
rename(self.x=self,self_posbin.x=self_posbin, n_reads.x=n_reads,circle_position.x=circle_position) %>%
left_join(ice_III_nodes%>%rename(functional.y=functional_trait), by="functional.y") %>%
rename(self.y=self,self_posbin.y=self_posbin, n_reads.y=n_reads, circle_position.y=circle_position) %>%
rbind(artificial_row)
ice_III_network[is.na(ice_III_network)] <- 0
ice_III_network <- ice_III_network %>%
mutate_at(vars(total:interaction_count.y), as.numeric) %>%
mutate(n_reads.x=round(n_reads.x*(44/11)), n_reads.y=round(n_reads.y*(44/11)))
write.csv(ice_III_network, "./ice_III_network.csv")
